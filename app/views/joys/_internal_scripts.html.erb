
<script>
  // Turbo Stream para receber novos joys
  document.addEventListener('turbo:before-stream-render', function(event) {
    console.log('Turbo Stream recebido');
    const stream = event.detail.newStream;
    const data = stream.getAttribute('data');
    console.log('Data do stream:', data);
    
    if (data) {
      try {
        const parsedData = JSON.parse(data);
        console.log('Parsed data:', parsedData);
        if (parsedData.action === 'new_joy') {
          // Salva o √∫ltimo joy criado para refer√™ncia
          window.lastCreatedJoy = parsedData.joy;
          
          // Adiciona o novo joy √† lista
          addJoyToList(parsedData.joy);
          
          // Adiciona o novo pin diretamente ao mapa
          if (window.mapController && window.mapController.addJoyToMap) {
            console.log('Adicionando novo joy ao mapa:', parsedData.joy.id);
            const marker = window.mapController.addJoyToMap(parsedData.joy);
            console.log('Marker criado:', !!marker);
            
            // Centraliza no novo pin
            setTimeout(() => {
              if (window.centerOnJoy) {
                console.log('Centralizando no novo joy:', parsedData.joy.id);
                window.centerOnJoy(parsedData.joy.id);
                
                // Limpa a refer√™ncia ap√≥s centralizar
                setTimeout(() => {
                  delete window.lastCreatedJoy;
                }, 2000);
              }
            }, 100);
          } else {
            console.error('Map controller n√£o dispon√≠vel, tentando recarregar mapa...');
            // Fallback: recarrega todos os joys do mapa
            setTimeout(() => {
              if (window.mapController && window.mapController.loadJoys) {
                window.mapController.loadJoys().then(() => {
                  // Ap√≥s recarregar, centraliza no novo joy
                  if (window.centerOnJoy) {
                    window.centerOnJoy(parsedData.joy.id);
                  }
                });
              }
            }, 500);
          }
        }
      } catch (e) {
        console.log('Erro ao processar stream:', e);
      }
    }
  });

  function addJoyToList(joy) {
    const list = document.getElementById('locations_list');
    const item = document.createElement('div');
    item.className = 'location-item';
    
    // Verifica se j√° foi curtido
    const isLiked = localStorage.getItem(`liked_${joy.id}`);
    const likeButtonText = isLiked ? '‚ù§Ô∏è' : 'ü§ç';
    
    item.innerHTML = `
      <div class="location-content">
        ${joy.emoji} ${joy.body}
      </div>
      <div class="location-meta">
        üìç ${getLocationName(joy.lat, joy.lng)}
      </div>
      <div class="location-footer">
        <span class="location-date">
          üìÖ ${new Date(joy.created_at).toLocaleString('pt-BR')}
        </span>
        <div class="like-section">
          <span class="like-count">‚ù§Ô∏è ${joy.likes_count}</span>
          <button class="like-btn ${isLiked ? 'liked' : ''}" data-joy-id="${joy.id}" ${isLiked ? 'disabled' : ''}>
            ${likeButtonText}
          </button>
        </div>
      </div>
    `;
    
    // Adiciona eventos
    setupJoyItemEvents(item, joy);
    
    // Insere no topo da lista com anima√ß√£o
    if (list.firstChild) {
      list.insertBefore(item, list.firstChild);
    } else {
      list.appendChild(item);
    }
    
    // Remove estado vazio se existir
    const emptyState = list.querySelector('.empty-state');
    if (emptyState) {
      emptyState.remove();
    }
  }

  function setupJoyItemEvents(item, joy) {
    // Evento de clique no item
    item.addEventListener('click', function(e) {
      if (e.target.classList.contains('like-btn')) {
        return;
      }
      
      // Remove sele√ß√£o anterior
      document.querySelectorAll('#locations_list > div').forEach(div => {
        div.classList.remove('selected');
      });
      
      // Destaca o item clicado
      this.classList.add('selected');
      
      // Centraliza no mapa
      if (window.centerOnJoy) {
        window.centerOnJoy(joy.id);
      }
    });
    
    // Evento de clique no bot√£o de like
    const likeBtn = item.querySelector('.like-btn');
    const countSpan = item.querySelector('.like-count');
    
    likeBtn.addEventListener('click', function(e) {
      e.stopPropagation();
      likeJoy(joy.id, likeBtn, countSpan);
    });
  }

  (function() {
    // Geolocaliza√ß√£o
    const geoBtn = document.getElementById('use_geo');
    const latField = document.createElement('input');
    const lngField = document.createElement('input');
    latField.type = 'hidden';
    lngField.type = 'hidden';
    document.body.appendChild(latField);
    document.body.appendChild(lngField);

    geoBtn.addEventListener('click', function() {
      geoBtn.textContent = '‚è≥';
      if (!navigator.geolocation) {
        geoBtn.textContent = '‚ùå';
        return;
      }
      navigator.geolocation.getCurrentPosition(function(pos) {
        latField.value = pos.coords.latitude.toFixed(6);
        lngField.value = pos.coords.longitude.toFixed(6);
        geoBtn.textContent = '‚úÖ';
      }, function(err) {
        geoBtn.textContent = '‚ùå';
      });
    });

    // Criar alegria
    const createBtn = document.getElementById('create_joy');
    const emojiField = document.getElementById('joy_emoji');
    const bodyField = document.getElementById('joy_body');

    createBtn.addEventListener('click', function() {
      if (!emojiField.value || !bodyField.value || !latField.value || !lngField.value) {
        alert('Preencha todos os campos e use sua localiza√ß√£o!');
        return;
      }

      fetch('/joys', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
        },
        body: JSON.stringify({
          joy: {
            emoji: emojiField.value,
            body: bodyField.value,
            lat: latField.value,
            lng: lngField.value
          }
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.errors) {
          alert('Erro: ' + data.errors.join(', '));
        } else {
          // Limpa o form
          emojiField.value = '';
          bodyField.value = '';
          geoBtn.textContent = 'üìç';
          latField.value = '';
          lngField.value = '';
          
          // Recarrega a lista
          loadLocations();
          
          // For√ßa atualiza√ß√£o do mapa
          setTimeout(() => {
            if (window.mapController && window.mapController.loadJoys) {
              window.mapController.loadJoys().then(() => {
                // Centraliza no novo joy ap√≥s recarregar
                if (window.centerOnJoy && data.id) {
                  window.centerOnJoy(data.id);
                }
              });
            }
          }, 200);
        }
      })
      .catch(error => {
        console.error('Erro:', error);
        alert('Erro ao criar alegria');
      });
    });

    // Sistema de likes
    function likeJoy(joyId, likeBtn, countSpan) {
      fetch(`/joys/${joyId}/like`, {
        method: 'POST',
        headers: {
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Atualiza o contador com o valor retornado do servidor
          countSpan.textContent = data.likes_count;
          
          // Muda o bot√£o para "curtido"
          likeBtn.textContent = '‚ù§Ô∏è';
          likeBtn.classList.add('liked');
          likeBtn.disabled = true;
          likeBtn.title = 'J√° curtido!';
          
          // Salva no localStorage
          localStorage.setItem(`liked_${joyId}`, 'true');
        }
      })
      .catch(error => {
        console.error('Erro ao curtir:', error);
        alert('Erro ao curtir alegria');
      });
    }

    // Filtros Ransack
    const filterEmoji = document.getElementById('filter_emoji');
    const filterPeriod = document.getElementById('filter_period');
    const clearFiltersBtn = document.getElementById('clear_filters');

    function buildFilterUrl() {
      const params = new URLSearchParams();
      
      if (filterEmoji.value) {
        params.append('q[emoji_eq]', filterEmoji.value);
      }
      
      if (filterPeriod.value) {
        const now = new Date();
        let startDate;
        
        switch (filterPeriod.value) {
          case 'today':
            startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            break;
          case 'week':
            startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            break;
          case 'month':
            startDate = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
            break;
        }
        
        if (startDate) {
          params.append('q[created_at_gteq]', startDate.toISOString());
        }
      }
      
      return params.toString();
    }

    function applyFilters() {
      const filterUrl = buildFilterUrl();
      const url = filterUrl ? `/joys.json?${filterUrl}` : '/joys.json';
      
      // Atualiza a lista
      loadLocations(url);
      
      // Atualiza o mapa (se o controller suportar)
      if (window.mapController && window.mapController.loadJoys) {
        window.mapController.loadJoys(url);
      }
    }

    filterEmoji.addEventListener('change', applyFilters);
    filterPeriod.addEventListener('change', applyFilters);
    
    clearFiltersBtn.addEventListener('click', function() {
      filterEmoji.value = '';
      filterPeriod.value = '';
      applyFilters();
    });

    // Carregar lista de localiza√ß√µes
    function loadLocations(url = '/joys.json') {
      fetch(url)
        .then(r => r.json())
        .then(joys => {
          const list = document.getElementById('locations_list');
          list.innerHTML = '';
          
          if (joys.length === 0) {
            list.innerHTML = '<div class="empty-state">Nenhuma alegria encontrada com esses filtros üòî</div>';
            return;
          }
          
          joys.forEach(joy => {
            const item = document.createElement('div');
            item.className = 'location-item';
            
            // Verifica se j√° foi curtido (usando localStorage)
            const isLiked = localStorage.getItem(`liked_${joy.id}`);
            const likeButtonText = isLiked ? '‚ù§Ô∏è' : 'ü§ç';
            const likeButtonColor = isLiked ? '#e74c3c' : '#666';
            const likeButtonDisabled = isLiked ? 'disabled' : '';
            
            item.innerHTML = `
              <div class="location-content">
                ${joy.emoji} ${joy.body}
              </div>
              <div class="location-meta">
                üìç ${getLocationName(joy.lat, joy.lng)}
              </div>
              <div class="location-footer">
                <span class="location-date">
                  üìÖ ${new Date(joy.created_at).toLocaleString('pt-BR')}
                </span>
                <div class="like-section">
                  <span class="like-count">‚ù§Ô∏è ${joy.likes_count}</span>
                  <button class="like-btn ${isLiked ? 'liked' : ''}" data-joy-id="${joy.id}" ${likeButtonDisabled}>
                    ${likeButtonText}
                  </button>
                </div>
              </div>
            `;
            
            // Evento de clique no item (centraliza no mapa)
            item.addEventListener('click', function(e) {
              // N√£o centraliza se clicou no bot√£o de like
              if (e.target.classList.contains('like-btn')) {
                return;
              }
              
                            // Remove sele√ß√£o anterior dos itens da lista
              document.querySelectorAll('#locations_list > div').forEach(div => {
                div.classList.remove('selected');
              });
              
              // Destaca o item clicado
              this.classList.add('selected');
              // Usa a fun√ß√£o global
              if (window.centerOnJoy) {
                window.centerOnJoy(joy.id);
              }
            });
            // Evento de clique no bot√£o de like
            const likeBtn = item.querySelector('.like-btn');
            const countSpan = item.querySelector('.like-count');
            likeBtn.addEventListener('click', function(e) {
              e.stopPropagation(); // Evita centralizar no mapa
              likeJoy(joy.id, likeBtn, countSpan);
            });

            
            list.appendChild(item);
          });
        });
    }

    function getLocationName(lat, lng) {
      return `Lat: ${parseFloat(lat).toFixed(4)}, Lng: ${parseFloat(lng).toFixed(4)}`;
    }

    // Carrega lista inicial
    loadLocations();
  })();
</script> 